"use strict";var k=Object.create;var G=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var V=(c,e)=>{for(var t in e)G(c,t,{get:e[t],enumerable:!0})},x=(c,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of F(e))!$.call(c,a)&&a!==t&&G(c,a,{get:()=>e[a],enumerable:!(i=D(e,a))||i.enumerable});return c};var P=(c,e,t)=>(t=c!=null?k(M(c)):{},x(e||!c||!c.__esModule?G(t,"default",{value:c,enumerable:!0}):t,c)),z=c=>x(G({},"__esModule",{value:!0}),c);var q={};V(q,{default:()=>I});module.exports=z(q);var d=require("obsidian");var _=require("child_process"),O=require("util");var L=require("child_process"),y=require("util"),C=require("fs"),m=P(require("path")),p=P(require("os")),S=(0,y.promisify)(L.exec),H=(0,y.promisify)(C.access),f=class{constructor(){this.cachedPath=null;this.lastValidation=0;this.CACHE_TTL=5*60*1e3;this.COMMON_PATHS={darwin:["/opt/homebrew/bin/gh","/usr/local/bin/gh","/usr/bin/gh",m.join(p.homedir(),".local/bin/gh")],win32:[m.join(process.env.PROGRAMFILES||"C:\\Program Files","GitHub CLI","gh.exe"),m.join(process.env.LOCALAPPDATA||"","GitHub CLI","gh.exe"),m.join(process.env.PROGRAMFILES||"C:\\Program Files","gh","gh.exe"),"gh.exe"],linux:["/usr/bin/gh","/usr/local/bin/gh","/snap/bin/gh",m.join(p.homedir(),".local/bin/gh"),m.join(p.homedir(),"bin/gh")]}}async resolveGhPath(e){try{if(this.isCacheValid()&&this.cachedPath){if((await this.validateGhExecutable(this.cachedPath)).success)return{success:!0,path:this.cachedPath,method:"cached"};this.clearCache()}if(e&&(await this.validateGhExecutable(e)).success)return this.updateCache(e),{success:!0,path:e,method:"user-defined"};let t=p.platform(),i=this.COMMON_PATHS[t]||this.COMMON_PATHS.linux;for(let n of i)if(n)try{if((await this.validateGhExecutable(n)).success)return this.updateCache(n),{success:!0,path:n,method:"common-paths"}}catch(s){continue}if((await this.validateGhExecutable("gh")).success)try{let{stdout:n}=await S(t==="win32"?"where gh":"which gh",{timeout:3e3}),s=n.trim().split(`
`)[0];return this.updateCache(s),{success:!0,path:s,method:"environment-path"}}catch(n){return{success:!0,path:"gh",method:"environment-path"}}return{success:!1,error:"GitHub CLI (gh) not found in any expected locations. Please install GitHub CLI or configure the path manually in plugin settings."}}catch(t){return{success:!1,error:`Path resolution failed: ${t instanceof Error?t.message:"Unknown error"}`}}}async validateGhExecutable(e){try{if(e!=="gh"&&!e.includes("gh.exe"))try{await H(e,C.constants.F_OK),p.platform()!=="win32"&&await H(e,C.constants.X_OK)}catch(s){return{success:!1,error:`File does not exist or is not executable: ${e}`}}let t=e.includes(" ")?`"${e}" --version`:`${e} --version`,{stdout:i,stderr:a}=await S(t,{timeout:8e3,env:{...process.env,PATH:process.env.PATH}});return i.toLowerCase().includes("gh version")?{success:!0,path:e}:{success:!1,error:`Invalid GitHub CLI executable. Expected "gh version" in output, got: ${i.slice(0,100)}`}}catch(t){let i="Unknown validation error";return t.code==="ENOENT"?i=`GitHub CLI executable not found: ${e}`:t.code==="ETIMEDOUT"?i=`GitHub CLI validation timed out: ${e}`:t.stderr?i=`GitHub CLI validation failed: ${t.stderr}`:t.message&&(i=`GitHub CLI validation error: ${t.message}`),{success:!1,error:i}}}getInstallationInstructions(){switch(p.platform()){case"darwin":return'Install GitHub CLI using Homebrew: "brew install gh", or download from https://github.com/cli/cli/releases';case"win32":return'Install GitHub CLI using winget: "winget install GitHub.cli", or download from https://github.com/cli/cli/releases';case"linux":return"Install GitHub CLI using your package manager or download from https://github.com/cli/cli/releases";default:return"Download GitHub CLI from https://github.com/cli/cli/releases"}}clearCache(){this.cachedPath=null,this.lastValidation=0}getCacheStatus(){return this.cachedPath?{cached:!0,path:this.cachedPath,age:Date.now()-this.lastValidation}:{cached:!1}}isCacheValid(){return this.cachedPath!==null&&Date.now()-this.lastValidation<this.CACHE_TTL}updateCache(e){this.cachedPath=e,this.lastValidation=Date.now()}};var R=/^https?:\/\/github\.com\/[^\/]+\/[^\/]+\/issues\/\d+$/;var b={GH_NOT_AVAILABLE:"GitHub CLI (gh) is not available. Plugin disabled.",FETCHING_TITLE:"Fetching GitHub issue title...",FETCH_SUCCESS:"GitHub issue title converted to link",FETCH_FAILED:"Failed to fetch title. Using original URL.",FETCH_ERROR_PREFIX:"Failed to fetch issue title: "},E={SUCCESS:2e3,ERROR:4e3,PERSISTENT:0};var N=(0,O.promisify)(_.exec),g=class extends Error{constructor(e){super(e),this.name="GitHubError"}},w=class{constructor(e){this.settings=e;this.cache=new Map;this.resolvedGhPath=null;this.pathResolver=new f}async checkGhAvailability(){try{let e=await this.pathResolver.resolveGhPath(this.settings.ghPath);return e.success&&e.path?(this.resolvedGhPath=e.path,console.log(`GitHub CLI found at: ${e.path} (${e.method})`),!0):(console.error("GitHub CLI availability check failed:",e.error),this.resolvedGhPath=null,!1)}catch(e){return console.error("GitHub CLI availability check failed:",e),this.resolvedGhPath=null,!1}}isGitHubIssueUrl(e){return R.test(e.trim())}async fetchIssueTitle(e){var i,a,n;if(!this.isGitHubIssueUrl(e))throw new g("Invalid GitHub issue URL format");let t=this.getCachedTitle(e);if(t)return t;if(!this.resolvedGhPath){let s=await this.pathResolver.resolveGhPath(this.settings.ghPath);if(!s.success||!s.path)throw new g(`GitHub CLI not available: ${s.error}`);this.resolvedGhPath=s.path}try{let s=this.buildGhCommand(this.resolvedGhPath,e),{stdout:r}=await N(s,{timeout:8e3}),o=r.trim();if(!o)throw new g("Empty title received from GitHub CLI");return this.cacheTitle(e,o),o}catch(s){if(this.isPathRelatedError(s)&&this.resolvedGhPath){console.warn("GitHub CLI path seems invalid, attempting to re-resolve...",s.message),this.resolvedGhPath=null,this.pathResolver.clearCache();let o=await this.pathResolver.resolveGhPath(this.settings.ghPath);if(o.success&&o.path){this.resolvedGhPath=o.path;try{let h=this.buildGhCommand(this.resolvedGhPath,e),{stdout:l}=await N(h,{timeout:8e3}),T=l.trim();if(T)return this.cacheTitle(e,T),T}catch(h){}}}let r=b.FETCH_ERROR_PREFIX;throw s.code==="ETIMEDOUT"?r+="Request timed out":s.code==="ENOENT"?r+="GitHub CLI executable not found":(i=s.stderr)!=null&&i.includes("not found")?r+="Issue not found or repository is private":(a=s.stderr)!=null&&a.includes("authentication")?r+='GitHub authentication required. Run "gh auth login"':(n=s.stderr)!=null&&n.includes("rate limit")?r+="GitHub API rate limit exceeded. Please try again later":r+=s.message||"Unknown error occurred",new g(r)}}getCachedTitle(e){let t=this.cache.get(e);return t?Date.now()-t.timestamp>this.settings.cacheTtl*60*1e3?(this.cache.delete(e),null):(this.cache.size>1&&(this.cache.delete(e),this.cache.set(e,t)),t.title):null}cacheTitle(e,t){if(this.cache.size>=this.settings.cacheSize){let i=this.cache.keys().next().value;i&&this.cache.delete(i)}this.cache.set(e,{title:t,timestamp:Date.now()})}clearCache(){this.cache.clear()}getCacheStats(){return{size:this.cache.size,maxSize:this.settings.cacheSize}}buildGhCommand(e,t){return`${e.includes(" ")?`"${e}"`:e} issue view "${t}" --json title -q .title`}isPathRelatedError(e){var t,i,a;return e.code==="ENOENT"||((t=e.message)==null?void 0:t.includes("command not found"))||((i=e.message)==null?void 0:i.includes("not found"))||((a=e.stderr)==null?void 0:a.includes("command not found"))}getCurrentGhPath(){return this.resolvedGhPath}async refreshGhPath(){return this.resolvedGhPath=null,this.pathResolver.clearCache(),await this.checkGhAvailability()}};var u=require("obsidian");var U={enabled:!0,cacheTtl:60,cacheSize:100,showNotifications:!0,supportedResourceTypes:["issues"]},v=class extends u.PluginSettingTab{constructor(t,i){super(t,i);this.plugin=i,this.pathResolver=new f}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"GitHub Issue Linker Settings"}),new u.Setting(t).setName("Enable plugin").setDesc("Turn the GitHub Issue Linker on or off").addToggle(a=>a.setValue(this.plugin.settings.enabled).onChange(async n=>{this.plugin.settings.enabled=n,await this.plugin.saveSettings()})),new u.Setting(t).setName("Cache TTL (minutes)").setDesc("How long to cache issue titles before refetching (minimum: 1 minute)").addText(a=>{let n=a.setPlaceholder("60").setValue(String(this.plugin.settings.cacheTtl)).onChange(async r=>{let o=Number(r);Number.isInteger(o)&&o>0?(this.plugin.settings.cacheTtl=o,await this.plugin.saveSettings(),s.textContent="",s.style.color=""):(s.textContent="Please enter a positive integer",s.style.color="var(--text-error)")}),s=t.createEl("div",{cls:"setting-item-description",text:""});return n}),new u.Setting(t).setName("Cache size").setDesc("Maximum number of issue titles to cache (minimum: 10)").addText(a=>{let n=a.setPlaceholder("100").setValue(String(this.plugin.settings.cacheSize)).onChange(async r=>{let o=Number(r);Number.isInteger(o)&&o>=10?(this.plugin.settings.cacheSize=o,await this.plugin.saveSettings(),s.textContent="",s.style.color=""):(s.textContent="Please enter an integer of 10 or more",s.style.color="var(--text-error)")}),s=t.createEl("div",{cls:"setting-item-description",text:""});return n}),new u.Setting(t).setName("Show notifications").setDesc("Display success and error notifications when processing GitHub URLs").addToggle(a=>a.setValue(this.plugin.settings.showNotifications).onChange(async n=>{this.plugin.settings.showNotifications=n,await this.plugin.saveSettings()})),new u.Setting(t).setName("GitHub CLI Path").setDesc("Custom path to GitHub CLI executable (leave empty for auto-detection)").addText(a=>{let n=a.setPlaceholder("Auto-detect (recommended)").setValue(this.plugin.settings.ghPath||"").onChange(async l=>{s.textContent="",s.className="setting-item-description",this.plugin.settings.ghPath=l.trim()||void 0,await this.plugin.saveSettings(),l.trim()&&this.validateGhPath(l.trim(),s)}),s=t.createEl("div",{cls:"setting-item-description",text:""}),r=t.createEl("div",{cls:"setting-item-control"}),o=r.createEl("button",{text:"Auto-detect",cls:"mod-cta"});o.onclick=async()=>{s.textContent="Detecting GitHub CLI...",s.className="setting-item-description";let l=await this.pathResolver.resolveGhPath();l.success&&l.path?(n.setValue(l.path),this.plugin.settings.ghPath=l.path,await this.plugin.saveSettings(),s.textContent=`\u2713 Found GitHub CLI at: ${l.path} (${l.method})`,s.style.color="var(--text-success)"):(s.textContent=`\u2717 ${l.error}`,s.style.color="var(--text-error)")};let h=r.createEl("button",{text:"Test"});return h.style.marginLeft="8px",h.onclick=async()=>{let l=n.getValue().trim()||void 0;await this.validateGhPath(l,s)},n}).addExtraButton(a=>{a.setIcon("info").setTooltip("GitHub CLI installation instructions").onClick(()=>{let n=this.pathResolver.getInstallationInstructions(),s=new(require("obsidian")).Modal(this.app);s.titleEl.setText("GitHub CLI Installation"),s.contentEl.createEl("p",{text:n}),s.contentEl.createEl("p",{text:'After installation, restart Obsidian and use the "Auto-detect" button.'}),s.open()})}),new u.Setting(t).setName("Supported resource types").setDesc("Types of GitHub resources to convert to links (Issues are currently supported)").addDropdown(a=>a.addOption("issues","Issues only").setValue("issues").onChange(async n=>{this.plugin.settings.supportedResourceTypes=[n],await this.plugin.saveSettings()})),t.createEl("h3",{text:"Usage"}),t.createEl("p",{text:"Simply paste a GitHub Issue URL into any Obsidian note, and it will be automatically converted to a Markdown link with the issue title."}),t.createEl("h3",{text:"Prerequisites"});let i=t.createEl("ul");i.createEl("li",{text:"GitHub CLI (gh) must be installed on your system"}),i.createEl("li",{text:'You must be authenticated with GitHub via "gh auth login"'}),t.createEl("p",{text:"If the GitHub CLI is not available, the plugin will be automatically disabled."})}async validateGhPath(t,i){var a;i.textContent="Validating GitHub CLI...",i.className="setting-item-description",i.style.color="";try{let n=await this.pathResolver.resolveGhPath(t);if(n.success&&n.path)i.textContent=`\u2713 GitHub CLI is working: ${n.path}`,i.style.color="var(--text-success)";else{i.textContent=`\u2717 ${n.error}`,i.style.color="var(--text-error)";let s=(a=i.parentElement)==null?void 0:a.createEl("div",{cls:"setting-item-description"});s&&(s.style.marginTop="8px",s.style.padding="8px",s.style.backgroundColor="var(--background-secondary)",s.style.borderRadius="4px"),s&&(s.createEl("strong",{text:"Installation Instructions:"}),s.createEl("br"),s.createEl("span",{text:this.pathResolver.getInstallationInstructions()}))}}catch(n){i.textContent=`\u2717 Validation failed: ${n instanceof Error?n.message:"Unknown error"}`,i.style.color="var(--text-error)"}}};var I=class extends d.Plugin{constructor(){super(...arguments);this.isPluginEnabled=!1}async onload(){if(console.log("Loading GitHub Issue Linker plugin"),await this.loadSettings(),this.githubService=new w(this.settings),!this.settings.enabled){console.log("GitHub Issue Linker plugin is disabled in settings"),this.addSettingTab(new v(this.app,this));return}if(!await this.githubService.checkGhAvailability()){new d.Notice(b.GH_NOT_AVAILABLE,E.ERROR),console.error("GitHub CLI (gh) is not available. Plugin disabled."),this.addSettingTab(new v(this.app,this));return}this.isPluginEnabled=!0,this.registerDomEvent(document,"paste",this.handlePaste.bind(this)),this.addSettingTab(new v(this.app,this)),console.log("GitHub Issue Linker plugin loaded successfully")}onunload(){console.log("Unloading GitHub Issue Linker plugin"),this.isPluginEnabled=!1}async handlePaste(t){var s;if(!this.isPluginEnabled||!this.settings.enabled)return;let i=this.app.workspace.getActiveViewOfType(d.MarkdownView);if(!(i!=null&&i.editor))return;let a=i.editor,n=(s=t.clipboardData)==null?void 0:s.getData("text/plain");n&&this.githubService.isGitHubIssueUrl(n)&&(t.preventDefault(),t.stopPropagation(),setTimeout(async()=>{await this.processUrlConversion(a,n)},10))}async processUrlConversion(t,i){let a=t.getCursor(),n=t.getLine(a.line),s=a;if(n.includes(i)){let o=n.indexOf(i);if(o>=0){let h={line:a.line,ch:o},l={line:a.line,ch:o+i.length};t.setSelection(h,l),s=h}}let r=null;this.settings.showNotifications&&(r=new d.Notice(b.FETCHING_TITLE,E.PERSISTENT));try{let o=await this.githubService.fetchIssueTitle(i),h=`[${o}](${i})`;t.replaceSelection(h),r&&r.hide(),this.settings.showNotifications&&new d.Notice(b.FETCH_SUCCESS,E.SUCCESS),console.log(`Successfully converted GitHub issue URL to link: ${o}`)}catch(o){r&&r.hide(),this.settings.showNotifications&&new d.Notice(b.FETCH_FAILED,E.ERROR),n.includes(i)||(t.setCursor(s),t.replaceSelection(i)),o instanceof g?console.error("GitHub Issue Linker error:",o.message):console.error("GitHub Issue Linker unexpected error:",o)}}async loadSettings(){this.settings=Object.assign({},U,await this.loadData())}async saveSettings(){if(await this.saveData(this.settings),this.githubService&&this.settings.enabled)try{await this.githubService.refreshGhPath()}catch(t){console.warn("Failed to refresh GitHub CLI path after settings change:",t)}}getStatus(){var t;return{enabled:this.settings.enabled,pluginEnabled:this.isPluginEnabled,cacheStats:((t=this.githubService)==null?void 0:t.getCacheStats())||{size:0,maxSize:0}}}};
